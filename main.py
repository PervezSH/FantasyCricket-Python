# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FanyasyCricketUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(544, 455)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.HeaderText_label = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.HeaderText_label.setFont(font)
        self.HeaderText_label.setAlignment(QtCore.Qt.AlignCenter)
        self.HeaderText_label.setObjectName("HeaderText_label")
        self.verticalLayout.addWidget(self.HeaderText_label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)

        self.SelectTeam_comboBox = QtWidgets.QComboBox(Dialog)
        self.SelectTeam_comboBox.setMinimumSize(QtCore.QSize(200, 25))
        self.SelectTeam_comboBox.setObjectName("SelectTeam_comboBox")
        self.SelectTeam_comboBox.addItem("")
        self.horizontalLayout.addWidget(self.SelectTeam_comboBox)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)

        self.SelectMatch_comboBox = QtWidgets.QComboBox(Dialog)
        self.SelectMatch_comboBox.setMinimumSize(QtCore.QSize(200, 25))
        self.SelectMatch_comboBox.setObjectName("SelectMatch_comboBox")
        self.SelectMatch_comboBox.addItem("")
        self.horizontalLayout.addWidget(self.SelectMatch_comboBox)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.horizontalLayout)

        self.line = QtWidgets.QFrame(Dialog)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)

        self.Player_label = QtWidgets.QLabel(Dialog)
        self.Player_label.setMinimumSize(QtCore.QSize(100, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Player_label.setFont(font)
        self.Player_label.setObjectName("Player_label")
        self.horizontalLayout_3.addWidget(self.Player_label)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)

        self.PointsText_label = QtWidgets.QLabel(Dialog)
        self.PointsText_label.setMinimumSize(QtCore.QSize(50, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PointsText_label.setFont(font)
        self.PointsText_label.setObjectName("PointsText_label")
        self.horizontalLayout_3.addWidget(self.PointsText_label)

        self.Points_label = QtWidgets.QLabel(Dialog)
        self.Points_label.setMinimumSize(QtCore.QSize(50, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Points_label.setFont(font)
        self.Points_label.setStyleSheet("color:rgb(1, 141, 200)")
        self.Points_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Points_label.setObjectName("Points_label")
        self.horizontalLayout_3.addWidget(self.Points_label)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)

        self.Player_listWidget = QtWidgets.QListWidget(Dialog)
        self.Player_listWidget.setMinimumSize(QtCore.QSize(250, 300))
        self.Player_listWidget.setObjectName("Player_listWidget")
        self.horizontalLayout_2.addWidget(self.Player_listWidget)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)

        self.Points_listWidget = QtWidgets.QListWidget(Dialog)
        self.Points_listWidget.setMinimumSize(QtCore.QSize(250, 300))
        self.Points_listWidget.setObjectName("Points_listWidget")
        self.horizontalLayout_2.addWidget(self.Points_listWidget)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem11)

        self.Calculate_pushButton = QtWidgets.QPushButton(Dialog)
        self.Calculate_pushButton.setMinimumSize(QtCore.QSize(150, 30))
        self.Calculate_pushButton.setObjectName("Calculate_pushButton")
        self.horizontalLayout_4.addWidget(self.Calculate_pushButton)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem12)
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        #Pupulating ComboBoxes
        self.populateTeamComboBox()
        self.SelectMatch_comboBox.addItem("match")

        #Calculate Score
        self.Calculate_pushButton.clicked.connect(self.calculateScore)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Evaluate Team"))
        self.HeaderText_label.setText(_translate("Dialog", "Evaluate the Performance of your Fantasy Team"))
        self.SelectTeam_comboBox.setItemText(0, _translate("Dialog", "Select Team"))
        self.SelectMatch_comboBox.setItemText(0, _translate("Dialog", "Select Match"))
        self.Player_label.setText(_translate("Dialog", "Players"))
        self.PointsText_label.setText(_translate("Dialog", "Points"))
        self.Points_label.setText(_translate("Dialog", "###"))
        self.Calculate_pushButton.setText(_translate("Dialog", "Calculate Score"))

    def populateTeamComboBox(self):
        cur = conFantasyDB.cursor()
        sql = "SELECT name FROM teams"
        cur.execute(sql)
        record = cur.fetchall()
        teams = []
        for row in record:
            teams.append(row[0])
        self.SelectTeam_comboBox.addItems(teams)

    def battingPoint(self, runs, fours, sixes, balls):
        points = runs//2
        if runs>=50:
            points += 5
            if runs>=100:
                points += 10
        if balls != 0:
            strikeRate = runs/balls*100
        else:
            strikeRate = 0
        if strikeRate>= 80 and strikeRate<=100:
            points += 2
        elif strikeRate >100:
            points += 4
        points += fours
        points += sixes*2
        return points

    def bowlingPoint(self, wkts, bowled, runs):
        overs = bowled/6
        points = 10*wkts
        if wkts>=3:
            points += 5
            if wkts >= 5:
                points += 10
        if overs != 0:
            ecoRate = runs/overs
        else:
            ecoRate  =0
        if ecoRate<2:
            points += 10
        elif ecoRate>=2 and ecoRate < 3.5:
            points += 7
        elif ecoRate >= 3.5 and ecoRate <= 4.5:
            points += 4
        return points

    def fieldingPoint(self, field):
        points = 10*field
        return points
    
    def calculateScore(self):
        if self.SelectTeam_comboBox.currentText() == "Select Team" :
            return
        self.Player_listWidget.clear()
        self.Points_listWidget.clear()
        teamName = self.SelectTeam_comboBox.currentText()
        cur = conFantasyDB.cursor()
        sql = "SELECT players FROM teams WHERE name = '"+teamName+"';"
        cur.execute(sql)
        record = cur.fetchone()
        selcted = []
        selcted = record[0].split(',')
        self.Player_listWidget.addItems(selcted)
        if self.SelectMatch_comboBox.currentText() != "Select Match":
            matchName = self.SelectMatch_comboBox.currentText()
            totalPoints = 0
            for i in range(self.Player_listWidget.count()):
                playerName = self.Player_listWidget.item(i).text()
                sql = "SELECT * FROM "+matchName+" WHERE player = '"+playerName+"';"
                cur.execute(sql)
                row = cur.fetchone()
                batScore = self.battingPoint(row[1], row[3], row[4], row[2])
                bowlScore = self.bowlingPoint(row[8], row[5], row[7])
                fieldScore = self.fieldingPoint(row[9]+row[10]+row[11])
                totalScore = batScore + bowlScore + fieldScore
                totalPoints += totalScore
                self.Points_listWidget.addItem(str(totalScore))
            self.Points_label.setText(str(totalPoints))


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(610, 700)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        #Central Widget
        self.main_centralwidget = QtWidgets.QWidget(MainWindow)
        self.main_centralwidget.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_centralwidget.sizePolicy().hasHeightForWidth())
        self.main_centralwidget.setSizePolicy(sizePolicy)
        self.main_centralwidget.setObjectName("main_centralwidget")
        #Horizontal Layout
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.main_centralwidget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(36, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        #Vertical Layout
        self.TopverticalLayout = QtWidgets.QVBoxLayout()
        self.TopverticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.TopverticalLayout.setObjectName("TopverticalLayout")
        #Your Selction Group Box
        self.yourSelctionGroupBox = QtWidgets.QGroupBox(self.main_centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.yourSelctionGroupBox.sizePolicy().hasHeightForWidth())
        self.yourSelctionGroupBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.yourSelctionGroupBox.setFont(font)
        self.yourSelctionGroupBox.setAutoFillBackground(False)
        self.yourSelctionGroupBox.setStyleSheet("background-color: rgb(229, 229, 229)")
        self.yourSelctionGroupBox.setCheckable(False)
        self.yourSelctionGroupBox.setObjectName("yourSelctionGroupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.yourSelctionGroupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.batsmen_textLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.batsmen_textLabel.setFont(font)
        self.batsmen_textLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.batsmen_textLabel.setObjectName("batsmen_textLabel")
        self.horizontalLayout_2.addWidget(self.batsmen_textLabel)

        self.batsmen_noLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        self.batsmen_noLabel.setStyleSheet("color : rgb(0, 85, 255)")
        self.batsmen_noLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.batsmen_noLabel.setObjectName("batsmen_noLabel")
        self.horizontalLayout_2.addWidget(self.batsmen_noLabel)

        self.bowler_textLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.bowler_textLabel.setFont(font)
        self.bowler_textLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.bowler_textLabel.setObjectName("bowler_textLabel")
        self.horizontalLayout_2.addWidget(self.bowler_textLabel)

        self.bowler_noLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        self.bowler_noLabel.setStyleSheet("color : rgb(0, 85, 255)")
        self.bowler_noLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.bowler_noLabel.setObjectName("bowler_noLabel")
        self.horizontalLayout_2.addWidget(self.bowler_noLabel)

        self.allrounder_textLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.allrounder_textLabel.setFont(font)
        self.allrounder_textLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.allrounder_textLabel.setObjectName("allrounder_textLabel")
        self.horizontalLayout_2.addWidget(self.allrounder_textLabel)

        self.allrounder_noLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        self.allrounder_noLabel.setStyleSheet("color : rgb(0, 85, 255)")
        self.allrounder_noLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.allrounder_noLabel.setObjectName("allrounder_noLabel")
        self.horizontalLayout_2.addWidget(self.allrounder_noLabel)

        self.wicketkeeper_textLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.wicketkeeper_textLabel.setFont(font)
        self.wicketkeeper_textLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.wicketkeeper_textLabel.setObjectName("wicketkeeper_textLabel")
        self.horizontalLayout_2.addWidget(self.wicketkeeper_textLabel)

        self.wicketkeeper_noLabel = QtWidgets.QLabel(self.yourSelctionGroupBox)
        self.wicketkeeper_noLabel.setStyleSheet("color : rgb(0, 85, 255)")
        self.wicketkeeper_noLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.wicketkeeper_noLabel.setObjectName("wicketkeeper_noLabel")
        self.horizontalLayout_2.addWidget(self.wicketkeeper_noLabel)
        #Point Group Box
        self.TopverticalLayout.addWidget(self.yourSelctionGroupBox)
        self.PointsGroupBox = QtWidgets.QGroupBox(self.main_centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PointsGroupBox.sizePolicy().hasHeightForWidth())
        self.PointsGroupBox.setSizePolicy(sizePolicy)
        self.PointsGroupBox.setObjectName("PointsGroupBox")
        self.PointsDisplayLayout = QtWidgets.QHBoxLayout(self.PointsGroupBox)
        self.PointsDisplayLayout.setObjectName("PointsDisplayLayout")

        self.pointAvailable_textlabel = QtWidgets.QLabel(self.PointsGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pointAvailable_textlabel.setFont(font)
        self.pointAvailable_textlabel.setObjectName("pointAvailable_textlabel")
        self.PointsDisplayLayout.addWidget(self.pointAvailable_textlabel)

        self.batsmen_noLabel_2 = QtWidgets.QLabel(self.PointsGroupBox)
        self.batsmen_noLabel_2.setStyleSheet("color : rgb(0, 85, 255)")
        self.batsmen_noLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.batsmen_noLabel_2.setObjectName("batsmen_noLabel_2")
        self.PointsDisplayLayout.addWidget(self.batsmen_noLabel_2)
        spacerItem1 = QtWidgets.QSpacerItem(220, 36, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.PointsDisplayLayout.addItem(spacerItem1)

        self.pointsUsed_textlabel = QtWidgets.QLabel(self.PointsGroupBox)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pointsUsed_textlabel.setFont(font)
        self.pointsUsed_textlabel.setObjectName("pointsUsed_textlabel")
        self.PointsDisplayLayout.addWidget(self.pointsUsed_textlabel)

        self.batsmen_noLabel_3 = QtWidgets.QLabel(self.PointsGroupBox)
        self.batsmen_noLabel_3.setStyleSheet("color : rgb(0, 85, 255)")
        self.batsmen_noLabel_3.setAlignment(QtCore.Qt.AlignCenter)
        self.batsmen_noLabel_3.setObjectName("batsmen_noLabel_3")
        self.PointsDisplayLayout.addWidget(self.batsmen_noLabel_3)
        spacerItem2 = QtWidgets.QSpacerItem(220, 36, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.PointsDisplayLayout.addItem(spacerItem2)
        #Player Selection Layout
        self.TopverticalLayout.addWidget(self.PointsGroupBox)
        self.PlayerSelection_Layout = QtWidgets.QHBoxLayout()
        self.PlayerSelection_Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.PlayerSelection_Layout.setObjectName("PlayerSelection_Layout")

        self.availablePlayer_groupBox = QtWidgets.QGroupBox(self.main_centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.availablePlayer_groupBox.sizePolicy().hasHeightForWidth())
        self.availablePlayer_groupBox.setSizePolicy(sizePolicy)
        self.availablePlayer_groupBox.setMinimumSize(QtCore.QSize(0, 507))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        self.availablePlayer_groupBox.setFont(font)
        self.availablePlayer_groupBox.setStyleSheet("background-color: white")
        self.availablePlayer_groupBox.setObjectName("availablePlayer_groupBox")
        self.layoutWidget = QtWidgets.QWidget(self.availablePlayer_groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 11, 251, 31))
        self.layoutWidget.setObjectName("layoutWidget")                                             #
        self.PlayerCatagorylLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.PlayerCatagorylLayout.setContentsMargins(0, 0, 0, 0)
        self.PlayerCatagorylLayout.setObjectName("PlayerCatagorylLayout")
        self.BATradioButton = QtWidgets.QRadioButton(self.layoutWidget)                             ##
        self.BATradioButton.setObjectName("BATradioButton")
        self.PlayerCatagorylLayout.addWidget(self.BATradioButton)
        self.BOWradioButton = QtWidgets.QRadioButton(self.layoutWidget)                             ##
        self.BOWradioButton.setObjectName("BOWradioButton")
        self.PlayerCatagorylLayout.addWidget(self.BOWradioButton)
        self.ARradioButton = QtWidgets.QRadioButton(self.layoutWidget)                              ##
        self.ARradioButton.setObjectName("ARradioButton")
        self.PlayerCatagorylLayout.addWidget(self.ARradioButton)
        self.WKradioButton = QtWidgets.QRadioButton(self.layoutWidget)                              ##
        self.WKradioButton.setObjectName("WKradioButton")
        self.PlayerCatagorylLayout.addWidget(self.WKradioButton)
        self.AvailablePlayer_listWidget = QtWidgets.QListWidget(self.availablePlayer_groupBox)      #
        self.AvailablePlayer_listWidget.setGeometry(QtCore.QRect(10, 51, 250, 450))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.AvailablePlayer_listWidget.sizePolicy().hasHeightForWidth())
        self.AvailablePlayer_listWidget.setSizePolicy(sizePolicy)
        self.AvailablePlayer_listWidget.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.AvailablePlayer_listWidget.setFont(font)
        self.AvailablePlayer_listWidget.setStyleSheet("color : rgb(0, 85, 255)")
        self.AvailablePlayer_listWidget.setObjectName("AvailablePlayer_listWidget")
        self.PlayerSelection_Layout.addWidget(self.availablePlayer_groupBox)

        self.centreArrow_groupBox = QtWidgets.QGroupBox(self.main_centralwidget)
        self.centreArrow_groupBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centreArrow_groupBox.sizePolicy().hasHeightForWidth())
        self.centreArrow_groupBox.setSizePolicy(sizePolicy)
        self.centreArrow_groupBox.setMinimumSize(QtCore.QSize(0, 507))
        self.centreArrow_groupBox.setMaximumSize(QtCore.QSize(16777215, 507))
        self.centreArrow_groupBox.setStyleSheet("")
        self.centreArrow_groupBox.setObjectName("centreArrow_groupBox")
        self.arrow_label = QtWidgets.QLabel(self.centreArrow_groupBox)
        self.arrow_label.setGeometry(QtCore.QRect(0, 5, 20, 501))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.arrow_label.setFont(font)
        self.arrow_label.setAlignment(QtCore.Qt.AlignCenter)
        self.arrow_label.setObjectName("arrow_label")
        self.PlayerSelection_Layout.addWidget(self.centreArrow_groupBox)

        self.usedPlayer_groupBox = QtWidgets.QGroupBox(self.main_centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.usedPlayer_groupBox.sizePolicy().hasHeightForWidth())
        self.usedPlayer_groupBox.setSizePolicy(sizePolicy)
        self.usedPlayer_groupBox.setMinimumSize(QtCore.QSize(0, 507))
        self.usedPlayer_groupBox.setStyleSheet("background-color:white")
        self.usedPlayer_groupBox.setObjectName("usedPlayer_groupBox")
        self.layoutWidget1 = QtWidgets.QWidget(self.usedPlayer_groupBox)
        self.layoutWidget1.setGeometry(QtCore.QRect(13, 10, 251, 31))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.team_horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.team_horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.team_horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.team_horizontalLayout.setObjectName("team_horizontalLayout")
        self.teamName_textLabel = QtWidgets.QLabel(self.layoutWidget1)                              #
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.teamName_textLabel.setFont(font)
        self.teamName_textLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.teamName_textLabel.setObjectName("teamName_textLabel")
        self.team_horizontalLayout.addWidget(self.teamName_textLabel)
        self.teamName_Label = QtWidgets.QLabel(self.layoutWidget1)                                  #
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.teamName_Label.setFont(font)
        self.teamName_Label.setStyleSheet("color: rgb(0, 85, 255)")
        self.teamName_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.teamName_Label.setObjectName("teamName_Label")
        self.team_horizontalLayout.addWidget(self.teamName_Label)
        self.UsedPlayer_listWidget = QtWidgets.QListWidget(self.usedPlayer_groupBox)                #
        self.UsedPlayer_listWidget.setGeometry(QtCore.QRect(10, 51, 250, 450))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.UsedPlayer_listWidget.setFont(font)
        self.UsedPlayer_listWidget.setStyleSheet("color : rgb(0, 85, 255)")
        self.UsedPlayer_listWidget.setObjectName("UsedPlayer_listWidget")
        self.PlayerSelection_Layout.addWidget(self.usedPlayer_groupBox)
        self.TopverticalLayout.addLayout(self.PlayerSelection_Layout)
        self.horizontalLayout_3.addLayout(self.TopverticalLayout)
        spacerItem3 = QtWidgets.QSpacerItem(36, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        MainWindow.setCentralWidget(self.main_centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 610, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Teams.addAction(self.actionNew_Team)
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #NEW Team
        self.actionNew_Team.triggered.connect(self.newClicked)
        self.bat = 0
        self.bow = 0
        self.ar = 0
        self.wk = 0
        self.availpoints = 1000
        self.usedpoints = 0
        self.totalplayer = 0
        #OPEN Team
        self.actionOPEN_Team.triggered.connect(self.openClicked)
        #SAVE Team
        self.actionSAVE_Team.triggered.connect(self.saveClicked)
        #EVALUATE Team
        self.actionEVALUATE_Team.triggered.connect(self.evaluateClicked)
        #Radio Buttons
        self.BATradioButton.toggled.connect(lambda: self.fillList("BAT"))
        self.BOWradioButton.toggled.connect(lambda: self.fillList("BOW"))
        self.ARradioButton.toggled.connect(lambda: self.fillList("AR"))
        self.WKradioButton.toggled.connect(lambda: self.fillList("WK"))
        #Populate Right Box
        self.AvailablePlayer_listWidget.itemDoubleClicked.connect(self.populateRightBox)
        #Depopulate Right Box
        self.UsedPlayer_listWidget.itemDoubleClicked.connect(self.dePopulateRightBox)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FantasyCricket-Python"))
        self.yourSelctionGroupBox.setTitle(_translate("MainWindow", "Your Selections"))
        self.batsmen_textLabel.setText(_translate("MainWindow", "Batsmen (BAT)"))
        self.batsmen_noLabel.setText(_translate("MainWindow", "##"))
        self.bowler_textLabel.setText(_translate("MainWindow", "Bowlers (BOW)"))
        self.bowler_noLabel.setText(_translate("MainWindow", "##"))
        self.allrounder_textLabel.setText(_translate("MainWindow", "Allrounders (AR)"))
        self.allrounder_noLabel.setText(_translate("MainWindow", "##"))
        self.wicketkeeper_textLabel.setText(_translate("MainWindow", "Wicket-Keepers (WK)"))
        self.wicketkeeper_noLabel.setText(_translate("MainWindow", "##"))
        self.pointAvailable_textlabel.setText(_translate("MainWindow", "Points Available"))
        self.batsmen_noLabel_2.setText(_translate("MainWindow", "##"))
        self.pointsUsed_textlabel.setText(_translate("MainWindow", "Points Used"))
        self.batsmen_noLabel_3.setText(_translate("MainWindow", "##"))
        self.BATradioButton.setText(_translate("MainWindow", "BAT"))
        self.BOWradioButton.setText(_translate("MainWindow", "BOW"))
        self.ARradioButton.setText(_translate("MainWindow", "AR"))
        self.WKradioButton.setText(_translate("MainWindow", "WK"))
        self.arrow_label.setText(_translate("MainWindow", ">"))
        self.teamName_textLabel.setText(_translate("MainWindow", "Team Name"))
        self.teamName_Label.setText(_translate("MainWindow", "Displayed Here"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))

        self.actionNew_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionNew_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionNew_Team.setStatusTip(_translate("MainWindow", "Create a new team"))

        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionOPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionOPEN_Team.setStatusTip(_translate("MainWindow", "Open an existing team"))

        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionSAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSAVE_Team.setStatusTip(_translate("MainWindow", "Save the team"))

        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionEVALUATE_Team.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionEVALUATE_Team.setStatusTip(_translate("MainWindow", "Calculate team score"))
    
    def updateStatus(self):
        self.batsmen_noLabel.setText(str(self.bat))
        self.bowler_noLabel.setText(str(self.bow))
        self.allrounder_noLabel.setText(str(self.ar))
        self.wicketkeeper_noLabel.setText(str(self.wk))
        self.batsmen_noLabel_2.setText(str(self.availpoints))
        self.batsmen_noLabel_3.setText(str(self.usedpoints))

    def showPOPUp(self, msg, icn):
        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle("FantasyCricket-Python")
        msg_box.setText(msg)
        msg_box.setIcon(icn)
        x = msg_box.exec_()

    def gameLogic(self):
        msg = ""
        if self.bat > 5:msg = "At max, 5 batsmen can be picked!"
        if self.bow > 5:msg = "At max, 5 bowler can be picked!"
        if self.ar > 3:msg = "At max, 3 Allrounder can be picked!"
        if self.wk > 1:msg = "At max, 1 wicket-keeper can be picked!"
        if self.totalplayer > 11:msg = "A total of 11 players can be picked!"
        if self.availpoints < 0:msg = "No Points Available!"
        if msg == "":
            return True
        else:
            self.showPOPUp(msg, QtWidgets.QMessageBox.Critical)
            return False
    
    def newClicked(self):
        self.main_centralwidget.setEnabled(True)
        self.updateStatus()
        text, ok = QtWidgets.QInputDialog.getText(MainWindow, 'New Team', 'Enter name of team:')
        if ok:
            self.teamName_Label.setText(str(text))

    def openClicked(self):
        self.main_centralwidget.setEnabled(True)
        self.UsedPlayer_listWidget.clear()
        self.updateStatus()
        cur = conFantasyDB.cursor()
        sql = "SELECT name FROM teams"
        cur.execute(sql)
        record = cur.fetchall()
        teams = []
        for row in record:
            teams.append(row[0])
        team, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Fantasy-Cricket Python","Choose a team", teams, 0, False)
        if ok and team:
            self.teamName_Label.setText(team)
        else:
            return
        sql = "SELECT players, value FROM teams WHERE name ='"+team+"';"
        cur.execute(sql)
        record = cur.fetchone()
        selelctedList = record[0].split(',')
        self.UsedPlayer_listWidget.addItems(selelctedList)
        #updating points
        self.usedpoints = record[1]
        self.availpoints -= self.usedpoints
        #Updating Status
        for i in range (self.UsedPlayer_listWidget.count()):
            sql = "SELECT ctg FROM stats WHERE player = '"+self.UsedPlayer_listWidget.item(i).text()+"';"
            cur.execute(sql)
            record = cur.fetchone()
            if record[0] == "BAT":self.bat +=1
            if record[0] == "BOW":self.bow +=1
            if record[0] == "AR":self.ar +=1
            if record[0] == "WK":self.wk +=1
        self.totalplayer = self.bat + self.bow + self.ar + self.wk
        self.updateStatus()
        
    def saveClicked(self):
        if self.totalplayer != 11:
            self.showPOPUp("Insufficient players", QtWidgets.QMessageBox.Critical)
            return
        selected = ""
        c = self.UsedPlayer_listWidget.count()
        for i in range(c):
            selected += self.UsedPlayer_listWidget.item(i).text()
            if i < c-1:
                selected += ","

        sql="INSERT INTO teams (name, players, value) VALUES ('"+self.teamName_Label.text()+"','"+selected+"','"+str(self.usedpoints)+"');"
        try:
            cur = conFantasyDB.cursor()
            cur.execute(sql)
            conFantasyDB.commit()
            self.showPOPUp("Team added successfully!", QtWidgets.QMessageBox.NoIcon)
        except Exception as e:
            print(e)
            self.showPOPUp("Error!", QtWidgets.QMessageBox.Critical)
            conFantasyDB.rollback()

    def evaluateClicked(self):
        self.Dialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.Dialog)
        self.Dialog.show()

    def fillList(self, ctgr):
        self.AvailablePlayer_listWidget.clear()
        cur = conFantasyDB.cursor()
        sql = "SELECT player FROM stats WHERE ctg = '"+ctgr+"';"
        cur.execute(sql)
        result = cur.fetchall()
        selected = []
        for i in range(self.UsedPlayer_listWidget.count()):
            selected.append(self.UsedPlayer_listWidget.item(i).text())
        for record in result:
            if record[0] not in selected:
                self.AvailablePlayer_listWidget.addItem(record[0])

    def populateRightBox(self, item):
        if self.BATradioButton.isChecked()==True:self.bat += 1
        if self.BOWradioButton.isChecked()==True:self.bow += 1
        if self.ARradioButton.isChecked()==True:self.ar += 1
        if self.WKradioButton.isChecked()==True:self.wk += 1
        #updating points
        cur = conFantasyDB.cursor()
        sql = "SELECT player,value FROM stats WHERE player = '"+item.text()+"';"
        cur.execute(sql)
        result = cur.fetchone()
        self.availpoints -= result[1]
        self.usedpoints += result[1]
        self.totalplayer += 1
        #checking criteria
        ret = self.gameLogic()
        if ret == False:
            if self.BATradioButton.isChecked()==True:self.bat -= 1
            if self.BOWradioButton.isChecked()==True:self.bow -= 1
            if self.ARradioButton.isChecked()==True:self.ar -= 1
            if self.WKradioButton.isChecked()==True:self.wk -= 1
            self.availpoints += result[1]
            self.usedpoints -= result[1]
            self.totalplayer -= 1
        else:
            #updating left and right box
            self.AvailablePlayer_listWidget.takeItem(self.AvailablePlayer_listWidget.row(item))
            self.UsedPlayer_listWidget.addItem(item.text())  
            self.updateStatus()

    def dePopulateRightBox(self,item):
        cur = conFantasyDB.cursor()
        sql = "SELECT player,ctg, value FROM stats WHERE player = '"+item.text()+"';"
        cur.execute(sql)
        result = cur.fetchone()
        if(result[1]=='BAT'):
            self.BATradioButton.setChecked(True)
            self.bat -= 1
        if(result[1]=='BOW'):
            self.BOWradioButton.setChecked(True)
            self.bow -= 1
        if(result[1]=='AR'):
            self.ARradioButton.setChecked(True)
            self.ar -= 1
        if(result[1]=='WK'):
            self.WKradioButton.setChecked(True)
            self.wk -= 1
        #updating points
        self.availpoints += result[2]
        self.usedpoints -= result[2]
        self.totalplayer -= 1
        self.updateStatus()
        #updating left and right box
        self.UsedPlayer_listWidget.takeItem(self.UsedPlayer_listWidget.row(item))
        self.AvailablePlayer_listWidget.addItem(item.text())



if __name__ == "__main__":
    import sys
    conFantasyDB = sqlite3.connect("FanyasyCricketDB.db")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    conFantasyDB.close()